#!/usr/bin/env node
const fs = require('node:fs')
const { glob } = require('glob')
const path = require('node:path')

const config = require('./config.json')

const abis = Object.keys(config).reduce((acc, name) => {
  try {
    const abiPath = Array.isArray(config[name]) ? config[name][0] : config[name]
    const data = require(path.join(__dirname, abiPath))
    const abi = Array.isArray(config[name]) ? data[config[name][1]] : data
    acc[name] = `const ${name}_ABI = ${JSON.stringify(abi)}`
    return acc
  } catch (err) {
    console.error(`Error loading ABI for ${name}:`, err)
    throw err
  }
}, {} as Record<string, any>)

fs.writeFileSync(
  path.join(__dirname, './generated.ts'),
  `// This file is auto-generated by shared/abi/codegen.ts

${Object.values(abis).join('\n\n')}

export enum ContractName {
${Object.keys(abis)
  .map(name => `${name} = '${name}'`)
  .join(',\n')}
}

export const getContractAbi = (name: ContractName) => {
  switch (name) {
    ${Object.keys(abis)
      .map(
        name => `
      case ContractName.${name}:
        return ${name}_ABI
    `
      )
      .join('\n')}
      default:
        throw new Error('Unknown contract name')
  }
}
`,
  { flag: 'w' }
)
